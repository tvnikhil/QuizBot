{
  "chunk-2633652c04fd22c7179333d8e36c173c": {
    "tokens": 1200,
    "content": "Page 1:\nNetwork Security\nIntroduction\nChapter 1\n\n\nPage 2:\nLearning Objective\n• Introduce the security requirements \n• confidentiality\n• integrity\n• availability\n• Describe the X.800 security architecture for OSI \n\n\nPage 3:\nNetwork Security Requirements\n\n\nPage 4:\nComputer Network Security\n• Definition: The protection afforded to an automated information \nsystem in order to attain the application objectives to preserving the \nintegrity, availability, and confidentiality of information system \nresources (includes hardware, software, firmware, information/data, \nand telecommunications).  \n- NIST Computer Security Handbook\n\n\nPage 5:\nConfidentiality\n• Data confidentiality: Assures that private or confidential information \nis not made available or disclosed to unauthorized individuals; \n• Privacy: Assures that individual's control or influence what \ninformation related to them may be collected and stored and by \nwhom and to whom that information may be disclosed\n• i.e., student grade information\n\n\nPage 6:\nIntegrity\n• Data integrity: Assures that data (both stored and in transmitted \npackets) and programs are changed only in a specified and authorized\nmanner;\n• System integrity: Assures that a system performs its intended \nfunction in an unimpaired manner, free from deliberate or \ninadvertent unauthorized manipulation of the system\n• i.e., a hospital patient’s allergy information  \n\n\nPage 7:\nAvailability\n• Availability: Assures that systems work promptly, and service is not \ndenied to authorized users, ensuring timely and reliable access to and \nuse of information\n• i.e., denial of service attack\n\n\nPage 8:\nOther security requirements\n• Authenticity\n• Accountability\n• tracible data source, \n• fault isolation\n• intrusion detection and prevention, \n• recovery and legal action\n• system must keep records of their activities to permit later forensic analysis to \ntrace security breaches or to aid in transaction disputes\n\n\nPage 9:\nQuestion\n• What security requirements does a blockchain system have achieved? \n\n\nPage 10:\nA Hyperledger\n\n\nPage 11:\nProject \n• Task1: OnDemand Professor Q&A Bot \n•\nYour task is to build a Q&A Bot over private data that answers questions about the network security course using the open-source\nalternatives to ChatGPT that can be run on your local machine. Data privacy can be compromised when sending data over the internet, \nso it is mandatory to keep it on your local system. \n•\nYour Q&A Bot should be able to understand user questions and provide appropriate answers from the local database, then the citations \nshould be added (must be accomplished) if the response is from the internet, then the web references should be added. \n•\nTrain your bot using network security lecture slides, network security textbook, and the Internet. \n•\nBy using Wireshark capture data for Step 4's of the LLM workflow shown in Figure 1. Provide detailed explanations of the trace data. \nAlso, Maintain a record of Step 1's prompt and its mapping to the trace data in Step 4's.\n• Task2: Quiz Bot \n•\nYour task is to build a quiz bot based on a network security course using the open-source alternatives to ChatGPT that can be run on \nyour local machine. Data privacy can be compromised when sending data over the internet, so it is mandatory to keep it on your local \nsystem. \n•\nTwo types of questions should be offered by the bot: randomly generated questions and specific topic questions and the answers should \nbe pulled from the network security database. Train your bot using network security quizzes, lecture slides, network security textbook, \nand the Internet. \n•\nThe quiz must include multiple-choice questions, true/false questions, and open-ended questions. \n•\nFinally, the bot should be able to provide feedback on the user's answers. \n\n\nPage 12:\n\n\nPage 13:\nOutline\n• Review\n• OSI Security Architecture\n• Attack model \n\n\nPage 14:\nOSI Security Architecture\n\n\nPage 15:\nOSI Security Architecture\n• International Telecommunication Union – Telecommunication (ITU-T) \nrecommends X.800\n• Security Architecture for Open Systems Interconnection (OSI)\n• Defines a systematic way of defining and providing security requirements\n• Used by IT managers and vendors in their products\nSecurity attacks\nSecurity mechanisms\nSecurity services\na process (or a device incorporating such a process) \nto detect, prevent, or recover from an attack\nenhances the security of the data processing \nsystems and the information transfers, such as \npolicies\n\n\nPage 16:\nOther Security Architectures\n• NIST, Cybersecurity Framework (CSF)\n• https://www.nist.gov/cyberframework\n• VIRTUAL WORKSHOP #2 | February 15, 2023 (9:00 AM – 5:30 PM EST). Discuss \npotential significant updates to the CSF \n• https://www.nist.gov/news-events/events/2023/02/journey-nist-cybersecurity-\nframework-csf-20-workshop-2\n• OWASP - Open Web Application Security Project\n• Web application security\n• OWASP Application Security Verification Standard (ASVS) -\nhttps://owasp.org/www-project-application-security-verification-standard/\n• OWASP Web Security Testing - https://owasp.org/www-project-web-security-testing-\nguide/\n• OWASP foundation\n\n\nPage 17:\nSecurity attack\n• Definition: any action that compromises the security of information \nowned by an organization\n• Two types of security attacks\n• Passive attack\n• Active attack\n\n\nPage 18:\nSecurity attack\n• Definition: any action that compromises the security of information \nowned by an organization\n• Two types of security attacks\n• Passive attack\n• Active attack\n\n\nPage 19:\nPassive attack\n• i.e. eavesdropping on or monitoring of transmissions\n• Goal:",
    "chunk_order_index": 0,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-7632e3d66823d987631ffd3afe5fca51": {
    "tokens": 1200,
    "content": "17:\nSecurity attack\n• Definition: any action that compromises the security of information \nowned by an organization\n• Two types of security attacks\n• Passive attack\n• Active attack\n\n\nPage 18:\nSecurity attack\n• Definition: any action that compromises the security of information \nowned by an organization\n• Two types of security attacks\n• Passive attack\n• Active attack\n\n\nPage 19:\nPassive attack\n• i.e. eavesdropping on or monitoring of transmissions\n• Goal: obtain information being transmitted\n• release of message contents\n• traffic analysis – a promiscuous sniffer\n• Very difficult to detect – no alteration of the data\n• But easy to prevent, why?\n\n\nPage 20:\nActive attack\n• active attack includes:\n• replay\n• Modification of messages\n• Denial of service\n• Masquerade\n\n\nPage 21:\nExample: two points communication \n• Generic types of attacks\nEavedropping\n\n\nPage 22:\nExample of modification attack in 6LoWPAN\n\n\nPage 23:\nExample: a group of attackers\n\n\nPage 24:\nKnow Your Threat Model\n• Threat model: A model of who your attacker is and what resources \nthey have\n• One of the best ways to counter an attacker is to attack their reasons\n\n\nPage 25:\nExample: adversary model\n• “The adversary is assumed to be intelligent and has \nlimited number of resources. Before capturing the \nnodes, it exploits the various vulnerabilities of the \nnetworks. It knows the topology of the network, \nrouting information. It aims to capture the sink node so \nas to disrupt the whole traffic. If it is not able to \ncapture the sink node, it will capture the nearby nodes \nof the sink. It tries to disrupt the whole traffic of the \nnetwork with minimum number of captured nodes. It is \nalso assumed that the adversary tends to attack more \non the nodes closer to the data sink than nodes that \nare far away” \n\n\nPage 26:\nNo class on Wednesday\n• No class on Wednesday (Sept 18, 2024) due to the Job fair. Wish you \ngood luck!\n• Reminder to form a project group by Sept. 9th, 2024\n\n\nPage 27:\nKnow Your Threat Model\n• Threat model: A model of who your attacker is and what resources \nthey have\n• One of the best ways to counter an attacker is to attack their reasons\n\n\nPage 28:\nStory…\n• The bear race\n• Takeaway: Even if a \ndefense is not perfect, it \nis important to always \nstay on top of best \nsecurity measures\nI don’t have to outrun the bear. I just have to outrun you\n\n\nPage 29:\nHuman Factors\n• The users\n• Users like convenience (ease of use)\n• If a security system is unusable, it will be unused\n• Users will find way to subvert security systems if it makes their lives easier\n• The programmers\n• Programmers make mistakes\n• Programmers use tools that allow them to make mistakes (e.g. C and C++)\n• Everyone else\n• Social engineering attacks exploit other people’s trust and access for personal \ngain\n\n\nPage 30:\nDesign in security from the start\n• When building a new system, include security as part of the design \nconsiderations rather than patching it after the fact\n• A lot of systems today were not designed with security from the start, \nresulting in patches that don’t fully fix the problem!\n• Keep these security principles in mind whenever you write code!\n\n\nPage 31:\nSecurity Services and Mechanisms\n\n\nPage 32:\nSupplementary materials\n• Internet Security Glossary, v2 – produced by Internet Society (ISOC) \nhttps://datatracker.ietf.org/doc/html/rfc4949\n• X.800 – OSI network security\nhttps://www.itu.int/rec/dologin_pub.asp?lang=f&id=T-REC-X.800-\n199103-I!!PDF-E&type=items\n\n\nPage 33:\nSummary for Chapter 1\n• Have learned:\n• Security requirements\n• Attack models\n• X.800 secure architecture, security services, mechanisms\n\n\nPage 34:\nReview Questions\n• William Stallings (WS), “Network Security \nEssentials”, 6th Global Edition\n• RQ 1.1 - 1.3\n• Prob 1.5\n\n\nPage 35:\nSymmetric Encryption and Message Confidentiality\nChapter 2\n\n\nPage 36:\nModel for network security\n\n\nPage 37:\nModel for network security\n• Using this model requires us to:\n• design a suitable algorithm for the security transformation \n• generate the secret information (keys) used by the algorithm \n• develop methods to distribute and share the secret information \n• specify a protocol enabling the principals to use the transformation and \nsecret information for a security service \n\n\nPage 38:\nSymmetric Encryption Principles\n\n\nPage 39:\nSymmetric encryption\n• Sender and recipient share a common/same key\n• Was the only type of cryptography, prior to invention of public-key in \n1970’s\n\n\nPage 40:\nSimplified model of symmetric encryption\n\n\nPage 41:\nSymmetric encryption\n• Has five ingredients\n• Plaintext:  the original message or data\n• Encryption algorithm: performs various substitutions and transformations on \nthe plaintext\n• Secret key\n• Ciphertext: the coded message\n• Decryption algorithm: takes the ciphertext and the same secret key and \nproduces the original plaintext\n\n\nPage 42:\nOther basic terminology\n• cipher - algorithm for transforming plaintext to ciphertext \n• encipher (encrypt) - converting plaintext to ciphertext\n• decipher (decrypt) - recovering plaintext from ciphertext\n• cryptography - study of encryption principles/methods\n• cryptanalysis (",
    "chunk_order_index": 1,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-78a737c1d24ce9928bf7ecd37a5c886d": {
    "tokens": 1200,
    "content": "performs various substitutions and transformations on \nthe plaintext\n• Secret key\n• Ciphertext: the coded message\n• Decryption algorithm: takes the ciphertext and the same secret key and \nproduces the original plaintext\n\n\nPage 42:\nOther basic terminology\n• cipher - algorithm for transforming plaintext to ciphertext \n• encipher (encrypt) - converting plaintext to ciphertext\n• decipher (decrypt) - recovering plaintext from ciphertext\n• cryptography - study of encryption principles/methods\n• cryptanalysis (codebreaking) - the study of principles/ methods of \ndeciphering ciphertext without knowing key\n\n\nPage 43:\nRequirements\n• Two requirements for secure use of symmetric encryption:\n• a strong encryption algorithm\n• a secret key known only to sender / receiver\nY = EK(X)\nX = DK(Y)\n• assume encryption algorithm is known\n• the security of symmetric encryption depends on the secrecy of the \nkey\n• implies a secure channel to distribute key\n\n\nPage 44:\nA strong encryption algorithm\nattacker\nencryption algorithm\nplaintext / enquiry\ncyphertext / response\n\n\nPage 45:\nTA & Grader\n• TA Name: Faiyaz, Amir (Project, Review & Quiz) \n• Email:  afaiyaz@ttu.edu\n• Reminder: Submit the names and emails of your group members to \nFALL 2024 CS5342 PROJECT GROUP NAMES.xlsx\n• Grader Name: Han, Namgyu (Homework, Quiz, Exam grading)\n• Email: Namgyu.Han@ttu.edu\n\n\nPage 46:\nA strong encryption algorithm\nattacker\nencryption algorithm\nplaintext / enquiry\ncyphertext / response\n\n\nPage 47:\nSecure Encryption Scheme\n• Unconditional security\n• no matter how much computer power is available, the cipher cannot be \nbroken since the ciphertext provides insufficient information to uniquely \ndetermine the corresponding plaintext\n• Computational security\n• the cost of breaking the cipher exceeds the value of the encrypted \ninformation;\n• or the time required to break the cipher exceeds the useful lifetime of the \ninformation\n\n\nPage 48:\nDesired characteristics\n• Cipher needs to completely obscure statistical properties of original \nmessage\n• more practically Shannon suggested combining elements to obtain:\n• Confusion – how does changing a bit of the key affect the ciphertext?\n• Diffusion – how does changing one bit of the plaintext affect the ciphertext?\nconfusion\nciphertext\nplaintext\ndiffusion\n\n\nPage 49:\nWays to achieve\n• Symmetric Encryption: \n• substitution / transposition / hybrid\n• Asymmetric Encryption: \n• Mathematical hardness - problems that are efficient to compute in one \ndirection, but inefficient to reverse by the attacker\n• Examples: Modular arithmetic, factoring, discrete logarithm problem, Elliptic Logs over \nElliptic Curves\n\n\nPage 50:\nTwo basic types\n• Block Ciphers \n• Typically 64, 128 bit blocks\n• A k-bit plaintext block maps to a k-bit ciphertext block \n• Usually employ Feistel structure \n• Stream Ciphers\n• A key is used to generate a stream of pseudo-random bits – key stream\n• Just XOR plaintext bits with the key stream for encryption \n• For decryption generate the key stream and XOR with the ciphertext! \n\n\nPage 51:\nSymmetric Block Encryption\n\n\nPage 52:\nBlock cipher\n• the most commonly used symmetric encryption algorithms\n• input: fixed-size blocks (Typically 64, 128 bit blocks), output: equal \nsize blocks\n• provide secrecy and/or authentication services\n• Data Encryption Standard (DES), triple DES (3DES), and the Advanced \nEncryption Standard (AES)s\n• Usually employ Feistel structure \n\n\nPage 53:\nFeistel Cipher Structure\n\n\nPage 54:\nFeistel Cipher Structure\n• most symmetric block ciphers are based on a Feistel Cipher Structure\n• based on the two primitive cryptographic operations\n• substitution (S-box)\n• permutation (P-box)\n• provide confusion and diffusion of message \n\n\nPage 55:\nFeistel Cipher Structure\n• Horst Feistel devised the feistel cipher in the 1973\n• based on concept of invertible product cipher\n• partitions input block into two halves\n• process through multiple rounds which\n• perform a substitution on left data half\n• based on round function of right half & subkey\n• then have permutation swapping halves\n• implements Shannon’s substitution-permutation network concept\n\n\nPage 56:\nFeistel Encryption and Decryption \n\n\nPage 57:\nSymmetric Block Encryption\n\n\nPage 58:\nBlock cipher\n• the most commonly used symmetric encryption algorithms\n• input: fixed-size blocks (Typically 64, 128 bit blocks), output: equal \nsize blocks\n• provide secrecy and/or authentication services\n• Data Encryption Standard (DES), triple DES (3DES), and the Advanced \nEncryption Standard (AES)s\n• Usually employ Feistel structure \n\n\nPage 59:\nFeistel Cipher Structure\n\n\nPage 60:\nFeistel Cipher Structure\n• most symmetric block ciphers are based on a Feistel Cipher Structure\n• based on the two primitive cryptographic operations\n• substitution (S-box)\n• permutation (P-box)\n• provide confusion and diffusion of message \n\n\nPage 61:\nFeistel Cipher Structure\n• Horst Feistel devised the feistel cipher in the 1973\n• based on concept of invertible product cipher\n• partitions input block into two halves\n• process through multiple rounds which\n• perform a substitution on left data half\n• based on round function of right half & subkey\n• then have permutation swapping halves\n• implements Shannon’s substitution-permutation network concept\n\n\nPage 62:\nFeistel Encryption and Decryption \n\n\nPage 63:\n\n\nPage 64:\nFeistel Encryption and Decryption \n\n\nPage 65:\nDES encryption\n•\n64 bits plaintext\n•\n56 bits effective key length\n\n\nPage",
    "chunk_order_index": 2,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-6befc8b5cdb9c1cf26743c13e58a3dd0": {
    "tokens": 1200,
    "content": "• partitions input block into two halves\n• process through multiple rounds which\n• perform a substitution on left data half\n• based on round function of right half & subkey\n• then have permutation swapping halves\n• implements Shannon’s substitution-permutation network concept\n\n\nPage 62:\nFeistel Encryption and Decryption \n\n\nPage 63:\n\n\nPage 64:\nFeistel Encryption and Decryption \n\n\nPage 65:\nDES encryption\n•\n64 bits plaintext\n•\n56 bits effective key length\n\n\nPage 66:\nDES Weakness\n• short length key (56 bits) is not secure enough. Brutal force search \ntakes short time. \n\n\nPage 67:\nTriple DES (3DES)\nDecrypting with the wrong key will further convolute the output\n\n\nPage 68:\n3DES\n• Triple DES with three different keys – brute-force complexity 2168\n• 3DES is the FIPS-approved symmetric encryption algorithm\n• Weakness: slow speed for encryption\nFIPS – Federal Information Processing Standards. The United States' Federal Information Processing Standards are publicly announced \nstandards developed by the National Institute of Standards and Technology for use in computer systems by non-military American government \nagencies and government contractors\n\n\nPage 69:\nAES\n• clearly a replacement for DES was needed\n• have theoretical attacks that can break it\n• have demonstrated exhaustive key search attacks\n• can use Triple-DES – but slow with small blocks\n• US NIST issued call for ciphers in 1997\n• 15 candidates accepted in Jun 98 \n• 5 were short-listed in Aug-99 \n• Rijndael was selected as the AES in Oct-2000\n• issued as FIPS PUB 197 standard in Nov-2001 \n\n\nPage 70:\nCriteria to evaluate AES\n• General security\n• Software implementations\n• Restricted-space environments\n• Hardware implementations\n• Attacks on implementations\n• Encryption versus decryption\n• Key agility\n• Other versatility and flexibility\n• Potential for instruction-level parallelism\nCryptographic Standards and Guidelines | CSRC (nist.gov)\n\n\nPage 71:\nAES Specification\n• symmetric block cipher \n• 128-bit data, 128/192/256-bit keys \n• stronger & faster than Triple-DES \n• provide full specification & design details \n• both C & Java implementations\n• NIST have released all submissions & unclassified analyses\nhttps://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-\nand-Guidelines/documents/aes-development/Rijndael-ammended.pdf\n\n\nPage 72:\nThe AES Cipher - Rijndael \n• an iterative rather than feistel cipher\n• treats data in 4 groups of 4 bytes\n• operates an entire block in every round\n• designed to be:\n• resistant against known-plaintext attacks\n• speed and code compactness on many CPUs\n• design simplicity\n\n\nPage 73:\nRijndael\n• processes data as 4 groups of 4 bytes (state) = 128 bits\n• has 10/12/14 rounds in which state undergoes: \n• byte substitution (1 S-box used on every byte) \n• shift rows (permute bytes row by row) \n• mix columns (alter each byte in a column as a function of all of the bytes in \nthe column) \n• add round key (XOR state with key material) \n• 128-bit keys – 10 rounds, 192-bit keys – 12 rounds, 256-bit keys – 14 \nrounds\n\n\nPage 74:\nAES Specification\n• symmetric block cipher \n• 128-bit data, 128/192/256-bit keys \n• stronger & faster than Triple-DES \n• provide full specification & design details \n• both C & Java implementations\n• NIST have released all submissions & unclassified analyses\nhttps://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-\nand-Guidelines/documents/aes-development/Rijndael-ammended.pdf\n\n\nPage 75:\nThe AES Cipher - Rijndael \n• an iterative rather than feistel cipher\n• treats data in 4 groups of 4 bytes\n• operates an entire block in every round\n• designed to be:\n• resistant against known-plaintext attacks\n• speed and code compactness on many CPUs\n• design simplicity\n\n\nPage 76:\nRijndael\n• processes data as 4 groups of 4 bytes (state) = 128 bits\n• has 10/12/14 rounds in which state undergoes: \n• byte substitution (1 S-box used on every byte) \n• shift rows (permute bytes row by row) \n• mix columns (alter each byte in a column as a function of all of the bytes in \nthe column) \n• add round key (XOR state with key material) \n• 128-bit keys – 10 rounds, 192-bit keys – 12 rounds, 256-bit keys – 14 \nrounds\n\n\nPage 77:\nAES Encryption and Decryption\n\n\nPage 78:\nAES encryption round\n\n\nPage 79:\n\n\nPage 80:\nAES pros\n• Most operations can be combined into XOR and table lookups - hence \nvery fast & efficient\n\n\nPage 81:\nTake-home Exercises\n• Find an AES API to encrypt a text (A), then decrypt it and check \nwhether the original text (A) equals the decrypted text (B). Whether A \n= B?\n• Compare the decryption time with different key lengths, and with DES \nand 3DES. \n• Suggestions: find a large A file. Run decryption a couple of times and take the \naverage. \n\n\nPage 82:\nReading materials\n• FIPS 197, Advanced Encryption Standard (AES) (nist.gov)\n\n\nPage 83",
    "chunk_order_index": 3,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-857f19665925777874ea4ce8165de2d4": {
    "tokens": 1200,
    "content": "text (A), then decrypt it and check \nwhether the original text (A) equals the decrypted text (B). Whether A \n= B?\n• Compare the decryption time with different key lengths, and with DES \nand 3DES. \n• Suggestions: find a large A file. Run decryption a couple of times and take the \naverage. \n\n\nPage 82:\nReading materials\n• FIPS 197, Advanced Encryption Standard (AES) (nist.gov)\n\n\nPage 83:\nWPEC 2024: NIST Workshop on Privacy-\nEnhancing Cryptography\n• Time: September 24–26, 2024\n• Free to register\n• Virtual conference via Zoom\n• https://csrc.nist.gov/events/2024/wpec2024\n\n\nPage 84:\nRandom and Pseudorandom Numbers\n\n\nPage 85:\nWhen to use random numbers?\n• Generation of a stream key for symmetric stream cipher \n• Generation of keys for public-key algorithms\n• RSA public-key encryption algorithm (described in Chapter 3)\n• Generation of a symmetric key for use as a temporary session key\n• used in a number of networking applications, such as Transport Layer Security \n(Chapter 5), Wi-Fi (Chapter 6), e-mail security (Chapter 7), and IP security \n(Chapter 8) \n• In a number of key distribution scenarios\n• Kerberos (Chapter 4)\n\n\nPage 86:\nTwo types of random numbers\n• True random numbers:\n• generated in non-deterministic ways. They are not predictable and repeatable\n• Pseudorandom numbers:\n• appear random, but are obtained in a deterministic, repeatable, and \npredictable manner\n\n\nPage 87:\nProperties of Random Numbers\n• Randomness\n• Uniformity\n• distribution of bits in the sequence should be uniform \n• Independence\n• no one subsequence in the sequence can be inferred from the others \n• Unpredictable\n• satisfies the \"next-bit test“\n\n\nPage 88:\nEntropy\n• A measure of uncertainty\n• In other words, a measure of how unpredictable the outcomes are\n• High entropy = unpredictable outcomes = desirable in cryptography\n• The uniform distribution has the highest entropy (every outcome equally \nlikely, e.g. fair coin toss)\n• Usually measured in bits (so 3 bits of entropy = uniform, random distribution \nover 8 values)\nEntropy of an information source\n\n\nPage 89:\n\n\nPage 90:\nProperties of Random Numbers\n• Randomness\n• Uniformity\n• distribution of bits in the sequence should be uniform \n• Independence\n• no one subsequence in the sequence can be inferred from the others \n• Unpredictable\n• satisfies the \"next-bit test“\n\n\nPage 91:\nEntropy\n• A measure of uncertainty\n• In other words, a measure of how unpredictable the outcomes are\n• High entropy = unpredictable outcomes = desirable in cryptography\n• The uniform distribution has the highest entropy (every outcome equally \nlikely, e.g. fair coin toss)\n• Usually measured in bits (so 3 bits of entropy = uniform, random distribution \nover 8 values)\nEntropy of an information source\n\n\nPage 92:\n\n\nPage 93:\n\n\nPage 94:\nTrue random numbers generators\n• Several sources of randomness – natural sources of randomness\n• decay times of radioactive materials\n• electrical noise from a resistor or semiconductor\n• radio channel or audible noise\n• keyboard timings\n• disk electrical activity\n• mouse movements\n• Physical unclonable function (PUF)\n• Some are better than others\n\n\nPage 95:\nCombining sources of randomness\n• Suppose r1, r2, …, rk are random numbers from different sources. \nE.g.,\nr1 = electrical noise from a resistor or semiconductor\nr2 = sample of hip-hop music on radio\nr3 = clock on computer\nb = r1⊕r2⊕…⊕rk\nIf any one of r1, r2, …, rk is truly random, then so is b\nMany poor sources + 1 good source = good entropy\n\n\nPage 96:\nPseudorandom Number Generators (PRNGs)\n• True randomness is expensive\n• Pseudorandom number generator (PRNGs): An algorithm that uses a \nlittle bit of true randomness to generate a lot of random-looking \noutput\n• Also called deterministic random bit generators (DRBGs)\n• PRNGs are deterministic: Output is generated according to a set \nalgorithm\n• However, for an attacker who can’t see the internal state, the output is \ncomputationally indistinguishable from true randomness\n\n\nPage 97:\nPseudorandom Number Generators (PRNGs)\n• True randomness is expensive\n• Pseudorandom number generator (PRNGs): An algorithm that uses a \nlittle bit of true randomness to generate a lot of random-looking \noutput\n• Also called deterministic random bit generators (DRBGs)\n• PRNGs are deterministic: Output is generated according to a set \nalgorithm\n• However, for an attacker who can’t see the internal state, the output is \ncomputationally indistinguishable from true randomness\n\n\nPage 98:\nPRNG: Definition\n• A PRNG has two functions:\n• PRNG.Seed(randomness): Initializes the internal state using the entropy\n• Input: Some truly random bits\n• PRNG.Generate(n): Generate n pseudorandom bits\n• Input: A number n\n• Output: n pseudorandom bits\n• Updates the internal state as needed\n• Properties\n• Correctness: Deterministic\n• Efficiency: Efficient to generate pseudorandom bits\n• Security: Indistinguishability from random\n• Rollback resistance: cannot deduce anything about any previously-generated bit\n\n\nPage 99:\nExample construction of",
    "chunk_order_index": 4,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-6506e5e6caf49ce92f0eb67efad106b4": {
    "tokens": 1200,
    "content": "• Input: Some truly random bits\n• PRNG.Generate(n): Generate n pseudorandom bits\n• Input: A number n\n• Output: n pseudorandom bits\n• Updates the internal state as needed\n• Properties\n• Correctness: Deterministic\n• Efficiency: Efficient to generate pseudorandom bits\n• Security: Indistinguishability from random\n• Rollback resistance: cannot deduce anything about any previously-generated bit\n\n\nPage 99:\nExample construction of PRNG\n• Using block cipher in Counter (CTR) mode:\n• If you want m random bits, and a block cipher with Ek has n bits, apply the \nblock cipher m/n times and concatenate the result:\n• PRNG.Seed(K | IV) = Ek(IV, 1) | Ek(IV, 2) | Ek(IV, 3) … Ek(IV, ceil(m/n)),\n• | is concatenation\n• Initialization vector (IV) / Nonce – typically is random or pseudorandom\nRandomness, \nPRNG output\n\n\nPage 100:\nPRNG: Security\n• Can we design a PRNG that is truly random?\n• A PRNG cannot be truly random\n• The output is deterministic given the initial seed\n• A secure PRNG is computationally indistinguishable from random to \nan attacker\n• Game: Present an attacker with a truly random sequence and a sequence \noutputted from a secure PRNG\n• An attacker should be able to determine which is which with probability ≈0\n• Equivalence: An attacker cannot predict future output of the PRNG\n\n\nPage 101:\nCreate pseudorandom numbers\n• Truly random numbers are impossible with any program!\n• However, we can generate seemingly random numbers, called \npseudorandom numbers\n• The function rand() returns a non-negative number between 0 and \nRAND_MAX\n• For C, it is defined in stdlib.h\n• arc4random() is a function available in some operating systems (primarily \nBSD-based systems like macOS and FreeBSD) that generates random \nnumbers. It is part of the C standard library and provides a more secure \nand higher-quality source of random numbers compared to rand()\n\n\nPage 102:\nPRNGs: Summary\n• True randomness requires sampling a physical process\n• PRNG: An algorithm that uses a little bit of true randomness to \ngenerate a lot of random-looking output\n• Seed(entropy): Initialize internal state\n• Generate(n): Generate n bits of pseudorandom output\n• Security: computationally indistinguishable from truly random bits\n\n\nPage 103:\nStream Ciphers\n\n\nPage 104:\nStream Ciphers\n• process the message bit by bit (as a stream) \n• typically have a (pseudo) random stream key\n• combined (XOR) with plaintext bit by bit \n• randomness of stream key completely destroys any statistically \nproperties in the message \n• Ci = Mi XOR StreamKeyi\n• what could be simpler!!!! \n• but must never reuse stream key\n• otherwise, can remove effect and recover messages, M⨁K⨁K = M\n\n\nPage 105:\nStream Ciphers\n• process the message bit by bit (as a stream) \n• typically have a (pseudo) random stream key\n• combined (XOR) with plaintext bit by bit \n• randomness of stream key completely destroys any statistically \nproperties in the message \n• Ci = Mi XOR StreamKeyi\n• what could be simpler!!!! \n• but must never reuse stream key\n• otherwise, can remove effect and recover messages, M⨁K⨁K = M\n\n\nPage 106:\nStream Cipher Properties\n• some design considerations are:\n• statistically random \n• depends on large enough key\n• large linear complexity\n• correlation immunity \n• confusion\n• diffusion\n\n\nPage 107:\nHow to generate Stream Key?\n• How to generate Stream Key?\n\n\nPage 108:\nStream Ciphers \n• Idea: replace “rand” by “pseudo rand”\n• Use Pseudo Random Number Generator \n• A secure PRNG produces output that looks indistinguishable from random\n• An attacker who can’t see the internal PRNG state can’t learn any output\n• PRNG: {0,1}s ® {0,1}n\n• expand a short (e.g., 128-bit) random seed into a long (typically unbounded) \nstring that “looks random”\n• Secret key is the seed\n• Basic encryption method: Ekey[M] = M Å PRNG(key)\n\n\nPage 109:\nStream Ciphers\n• Protocol: Alice and Bob both seed a secure PRNG with their \nsymmetric secret key, and then use the output as the key for stream \nkey\nAlice\nBob\nSeed(k)\nSeed(k)\nGenerate(n)\nGenerate(n)\nPlaintext\nPlaintext\nCiphertext\n⊕\n⊕\n\n\nPage 110:\nStream Ciphers: Encrypting Multiple Messages\n• How do we encrypt multiple messages without key reuses?\nAlice\nBob\nSeed(k)\nSeed(k)\nGenerate(n)\nGenerate(n)\nPlaintext\nPlaintext\nCiphertext\n⊕\n⊕\n\n\nPage 111:\nStream Ciphers: Encrypting Multiple Messages\n• Solution: For each message, seed the PRNG with the key and a \nrandom IV, concatenated(“|”). Send the IV with the ciphertext\nAlice\nBob\nSeed(k | IV)\nSeed(k | IV)\nGenerate(n)\nGenerate(n)\nPlaintext\nPlaintext\nCiphertext\n⊕\n⊕\nIV\nIV\n\n\nPage 112:\nReal-world example: RC4\n• a proprietary cipher designed in 1987 \n• Extremely simple but effective!\n• Very fast - especially in software\n• Easily adapts to any key length, byte-oriented",
    "chunk_order_index": 5,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-bfecccc5e9fe10287ed4f436521ec522": {
    "tokens": 1200,
    "content": "IV, concatenated(“|”). Send the IV with the ciphertext\nAlice\nBob\nSeed(k | IV)\nSeed(k | IV)\nGenerate(n)\nGenerate(n)\nPlaintext\nPlaintext\nCiphertext\n⊕\n⊕\nIV\nIV\n\n\nPage 112:\nReal-world example: RC4\n• a proprietary cipher designed in 1987 \n• Extremely simple but effective!\n• Very fast - especially in software\n• Easily adapts to any key length, byte-oriented stream cipher \n• widely used (web SSL/TLS, wireless WEP, WAP) \n• A trade secret by RSA Security\n• uses that permutation to scramble input info processed a byte at a \ntime \n\n\nPage 113:\nRC4 Stream Cipher\nK\nRC4 (K|IV)\n011010010111\n⊕\nM\nC\nkey\n(seed)\nkey stream\n(pseudo random sequence)\nmessage\nciphertext\n\n\nPage 114:\nRC4 Key Schedule\n• starts with an array S of \nnumbers: 0…255\n• use key to well and truly \nshuffle\n• S forms internal state of \nthe cipher\n• given a key k of length I \nbytes\nThrow away T & K, retain S\n\n\nPage 115:\n\n\nPage 116:\nRC4 Stream Cipher\nK\nRC4 (K|IV)\n011010010111\n⊕\nM\nC\nkey\n(seed)\nkey stream\n(pseudo random sequence)\nmessage\nciphertext\n\n\nPage 117:\nRC4 Key Schedule\n• starts with an array S of \nnumbers: 0…255\n• use key to well and truly \nshuffle\n• S forms internal state of \nthe cipher\n• given a key k of length I \nbytes\nThrow away T & K, retain S\n\n\nPage 118:\n\n\nPage 119:\nRC4 Encryption\n• encryption continues \nshuffling array values\n• sum of shuffled pair \nselects \"stream key\" \nvalue\n• XOR with next byte of \nmessage to en/decrypt\n\n\nPage 120:\nRC4\n\n\nPage 121:\nRC4 Security\n• claimed secure against known attacks\n• since RC4 is a stream cipher, must never reuse a key\n• have a concern with WEP, but due to key handling rather than RC4 \nitself \n• RC4 Biases: It is extensively studied, not a completely secure PRNG, \nfirst part of output biased, when used as stream cipher, should use \nRC4-Drop[n]\n• Which drops first n bytes before using the output\n• Conservatively, set n=3072\n\n\nPage 122:\nSummary – Chapter 2\n• Symmetric block cipher\n• DES, 3DES\n• AES\n• Random number\n• true random number\n• pseudorandom number\n• Stream cipher \n• The security of symmetric encryption depends on the secrecy of the \nkey\n• Symmetric encryption: pros and cons \n\n\nPage 123:\nModular Arithmetic\n• Definition (congruent modulo): \n• given b – a = km for some k 𝜖𝑍, then a ≡𝑏(mod m)\n• Given a ≡𝑏(mod m) and c ≡𝑑(mod m), then\n• a + b ≡c + d (mod m)\n• a - b ≡c - d (mod m)\n• a + c ≡b + d (mod m)\n• a × c ≡b × d (mod m)\n• ak ≡bk (mod m)\n• ka = kb (mod m)\n• p(a) ≡p(b) (mod m), any polynomial p(x) with integer coefficients\n• A ⨁𝐵⨁𝐵= A\n\n\nPage 124:\nThank you!\n\n\nPage 125:\nNetwork Security\nChapter 3\nPublic-Key Cryptography and Message Authentication\n\n\nPage 126:\nPublic-Key Cryptography\n\n\nPage 127:\nConventional cryptography\n• traditional private/secret/single-key cryptography uses one key \n• shared by both sender and receiver \n• if this key is disclosed, communications are compromised \n• also is symmetric, parties are equal \n\n\nPage 128:\nPros and cons\n• Pros:\n• Encryption is fast for large amounts of data\n• Provide the same level of security with a shorter encryption key\n• By now, it’s unbreakable to quantum computing\n• Cons\n• Key distribution assumes a secure channel\n• Does not protect sender from receiver forging a message & claiming it’s sent \nby sender\n• It does not scale well for large networks. It requires a separate key for each \npair of communicating parties, which can result in a large number of keys to \nmanage and protect. \n\n\nPage 129:\nHomework 1 - individual\n• Chapter 1 & 2\n• Deadline: Tuesday, October 8, 11:59 PM\n• Submit your homework via the provided link.\n• The Google submission timestamp will be considered final.\n• A 10% penalty will be applied for each day of late submission.\n\n\nPage 130:\nReview & Quiz I\n• Chapter 1 & 2\n• Wednesday (Oct. 9, 2024), in class\n• Please ensure your participation\n• No make-up quiz\n\n\nPage 131:\nPublic-Key Cryptography\n• In public-key schemes, each person has two keys\n• Public key: Known to everybody\n• Private key: Only known by that person\n• Keys come in pairs: every public key corresponds to one private key\n• Uses number theory\n• Examples: Modular arithmetic, factoring, discrete logarithm problem, \nElliptic logs over Elliptic Curves\n• Contrast with symmetric-key cryptography (uses XORs and bit-shifts)\n• Messages are numbers",
    "chunk_order_index": 6,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-c33e98766f727bb94472b30f064d74d1": {
    "tokens": 1200,
    "content": "-Key Cryptography\n• In public-key schemes, each person has two keys\n• Public key: Known to everybody\n• Private key: Only known by that person\n• Keys come in pairs: every public key corresponds to one private key\n• Uses number theory\n• Examples: Modular arithmetic, factoring, discrete logarithm problem, \nElliptic logs over Elliptic Curves\n• Contrast with symmetric-key cryptography (uses XORs and bit-shifts)\n• Messages are numbers\n• Contrast with symmetric-key cryptography (messages are bit strings)\n\n\nPage 132:\nPublic-key Cryptography\n• Benefit:\n• Drawback:\n• Benefit: No longer need to assume that Alice and Bob already share a \nsecret\n• Drawback: Much slower than symmetric-key cryptography\n• Number theory calculations are much slower than XORs and bit-shifts\n\n\nPage 133:\nReading materials\n• Encryption: Strengths and Weaknesses of Public-key Cryptography\n• Public-key cryptography is a public invention due to Whitfield Diffie & \nMartin Hellman at Stanford Uni in 1976\n\n\nPage 134:\nPublic-key cryptography\n• public-key/two-key/asymmetric cryptography involves the use of \ntwo keys: \n• a public-key, which may be known by anybody, and can be used to encrypt \nmessages, and verify signatures\n• a private-key, known only to the recipient, used to decrypt messages, and \nsign (create) signatures\n• is asymmetric because\n• Not the same key\n• those who encrypt messages or verify signatures cannot decrypt messages or \ncreate signatures\n\n\nPage 135:\nPublic-Key Encryption\n• Everybody can encrypt with the public key\n• Only the recipient can decrypt with the private key\n\n\nPage 136:\nPublic-Key Cryptography - Encryption\n\n\nPage 137:\nEncryption steps\n• step1: generate a pair of keys\n• step2: keep the private key / secret key (SK) and distribute the public \nkey (PK) – place PK in a public register or other accessible file\n• step3: Bob encrypts the message with Alice’s PK\n• step4: upon receiving the ciphertext (CT), Alice decrypt CT with SK\n\n\nPage 138:\nAn example of key distribution\nSSH key-based client authentication. Source: Peiyue and \nYuanyuan 2021.\n1.Peiyue, G. and F. Yuanyuan. 2021. \"What Is SSH?\" Info-Finder, Huawei, July \n22. Updated 2021-12-14. Accessed 2023-04-18.\n\n\nPage 139:\nEncryption steps\n• step1: generate a pair of keys\n• step2: keep the private key / secret key (SK) and distribute the public \nkey (PK) – place PK in a public register or other accessible file\n• step3: Bob encrypts the message with Alice’s PK\n• step4: upon receiving the ciphertext (CT), Alice decrypt CT with SK\n\n\nPage 140:\nPublic-Key Encryption: Definition\n• Three parts:\n• KeyGen() → PK, SK: Generate a public/private keypair, where PK is the public \nkey, and SK is the private (secret) key\n• Enc(PK, M) → C: Encrypt a plaintext M using public key PK to produce \nciphertext C\n• Dec(SK, C) → M: Decrypt a ciphertext C using secret key SK\n• Properties\n• Correctness: Decrypting a ciphertext should result in the message that was \noriginally encrypted\n• Dec(SK, Enc(PK, M)) = M for all PK, SK ← KeyGen() and M\n• Efficiency: Encryption/decryption should be fast\n• Security: 1. Alice (the challenger) just gives Eve (the adversary) the public key, \nand Eve doesn’t request encryptions. Eve cannot guess out anything; 2. \ncomputationally infeasible to recover M with PK and ciphertext\n\n\nPage 141:\nPublic-Key Cryptography - Signature\n\n\nPage 142:\nReview\nPrivate Key\nPublic Key\nSignature\nEncryption\n\n\nPage 143:\nPublic-Key application\n• can classify uses into 3 categories:\n• encryption/decryption (provide secrecy)\n• digital signatures (provide authentication)\n• key exchange (of session keys)\n• some algorithms are suitable for all uses; others are specific to one\n• Either of the two related keys can be used for encryption, with the \nother used for decryption\n\n\nPage 144:\nSecurity of Public Key Schemes\n• Keys used are very large (>512bits) \n• like private key schemes brute force exhaustive search attack is always \ntheoretically possible \n• Security relies on a large enough difference in difficulty between easy \n(en/decrypt) and hard (cryptanalyze) problems\n• more generally the hard problem is known, it’s just made too hard to do in \npractice \n• Requires the use of very large numbers, hence is slow compared to \nprivate/symmetric key schemes\n\n\nPage 145:\nPublic-Key Cryptography Algorithm\n(RSA)\n\n\nPage 146:\nRSA Public-key encryption\n• by Rivest, Shamir & Adleman of MIT in 1977 \n• currently the “work horse” of Internet security\n• most public key infrastructure (PKI) products\n• SSL/TLS: certificates and key-exchange\n• secure e-mail: PGP, Outlook, ….\n• based on exponentiation in a finite (Galois) field over integers modulo a \nprime \n• exponentiation takes O((log n)3) operations (easy)\n• security due to cost of factoring large integer numbers \n• factorization takes O(e log n log log n) operations (hard)\n• uses large integers (eg. 1024 bits)\n\n\nPage 147:\nRSA key setup",
    "chunk_order_index": 7,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-4e4a904bf47f1b6c3528497783ff36c0": {
    "tokens": 1200,
    "content": "and key-exchange\n• secure e-mail: PGP, Outlook, ….\n• based on exponentiation in a finite (Galois) field over integers modulo a \nprime \n• exponentiation takes O((log n)3) operations (easy)\n• security due to cost of factoring large integer numbers \n• factorization takes O(e log n log log n) operations (hard)\n• uses large integers (eg. 1024 bits)\n\n\nPage 147:\nRSA key setup\n• each user generates a public/private key pair by: \n• selecting two large primes at random - p, q\n• computing their system modulus n=p!q\n• note ø(n)=(p-1)(q-1)\n• selecting at random the encryption key e\n• where 1<e<ø(n), gcd(e,ø(n))=1 \n• solve following equation to find decryption key d\n• ed=1 mod ø(n)\n• publish their public encryption key: pk={e,n} \n• keep secret private decryption key: sk={d,p,q} \n\n\nPage 148:\n\n\nPage 149:\nRSA example\n1.\nSelect primes: p=17 & q=11\n2.\nCompute n = pq =17×11=187\n3.\nCompute ø(n)=(p–1)(q-1)=16×10=160\n4.\nSelect e : gcd(e,160)=1; choose e=7\n5.\nDetermine d: de=1 mod 160 and d < 160 Value is d=23 since \n23×7=161= 10×160+1\n6.\nPublish public key pk={7,187}\n7.\nKeep secret private key sk={23,17,11}\n\n\nPage 150:\nRSA example\n1.\nSelect primes: p=17 & q=11\n2.\nCompute n = pq =17×11=187\n3.\nCompute ø(n)=(p–1)(q-1)=16×10=160\n4.\nSelect e : gcd(e,160)=1; choose e=7\n5.\nDetermine d: de=1 mod 160 and d < 160 Value is d=23 since \n23×7=161= 10×160+1\n6.\nPublish public key pk={7,187}\n7.\nKeep secret private key sk={23,17,11}\n\n\nPage 151:\nRSA use\n• to encrypt a message M the sender:\n• obtains public key of recipient pk={e,n}\n• computes: C=Me mod n, where 0≤M<n\n• to decrypt the ciphertext C the owner:\n• uses their private key sk={d,p,q}\n• computes: M=Cd mod n\n• note that the message M must be smaller than the modulus n (block \nif needed)\nPlaintext\nCiphertext\nC = 𝑀!\npk={e,n}\nsk={d,p,q}\n\n\nPage 152:\nRSA example continue\n• sample RSA encryption/decryption is: \n• given message M = 88 ( 88<187)\n• encryption:\nC = 887 mod 187 = 11\n• decryption:\nM = 1123 mod 187 = 88\n\n\nPage 153:\nExample of RSA algorithm\n\n\nPage 154:\nRSA key generation\n• users of RSA must:\n• determine two primes at random - p, q\n• select either e or d and compute the other\n• primes p,q must not be easily derived from modulus n=p.q\n• means must be sufficiently large\n• typically guess and use probabilistic test\n• exponents e, d are inverses, so use Inverse algorithm to compute the \nother\n\n\nPage 155:\nCorrectness of RSA\n• Euler’s theorem: if gcd (M, n) = 1, then 𝑀!(#) = 1 mod n. Here φ(n) \nis Euler’s totient function: the number of integers in {1, 2, . . ., n-1} \nwhich are relatively prime to n. When n is a prime, this theorem is \njust Fermat’s little theorem\nM’ = 𝐶% mod n = 𝑀&% mod n\n=  𝑀(! # )* mod n\n=  [𝑀!(#)](, 𝑀 mod n\n= M  mod n\n\n\nPage 156:\n\n\nPage 157:\nAttack approaches\n• Mathematical attacks: several approaches, all equivalent in effort to \nfactoring the product of two primes. The defense against \nmathematical attacks is to use a large key size. \n• Timing attacks: These depend on the running time of the decryption \nalgorithm\n• Chosen ciphertext attacks: this type of attacks exploits properties of \nthe RSA algorithm by selecting blocks of data. These attacks can be \nthwarted by suitable padding of the plaintext, such as PKCS1 V1.5 in \nSSL\n\n\nPage 158:\nA simple attack on textbook RSA\n• Session-key  K is 64 bits.     View   K Î {0,…,264}\n• Eavesdropper sees:    C = Ke (mod N) .\n• Suppose   K = K1×K2 where   K1, K2 < 234 .   \n• Then:    C/K1\ne = K2\ne (mod N)\n• Build table:   C/1e, C/2e, C/3e, …, C/234e .   time:  234\nFor  K2 = 0,…, 234 test if  K2\ne is in table.   time: 234×34\n• Attack time:   »240  << 264\nWeb \nBrowser\nWeb",
    "chunk_order_index": 8,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-b06aeee6d2eaab42ebb3c8ec791a308c": {
    "tokens": 1200,
    "content": "• Then:    C/K1\ne = K2\ne (mod N)\n• Build table:   C/1e, C/2e, C/3e, …, C/234e .   time:  234\nFor  K2 = 0,…, 234 test if  K2\ne is in table.   time: 234×34\n• Attack time:   »240  << 264\nWeb \nBrowser\nWeb\nServer\nRandom session key K\nd\nClient Hello\nServer Hello (e, N)\nC = RSA (K)\n\n\nPage 159:\nAttack approaches\n• Mathematical attacks: several approaches, all equivalent in effort to \nfactoring the product of two primes. The defense against \nmathematical attacks is to use a large key size. \n• Timing attacks: These depend on the running time of the decryption \nalgorithm\n• Chosen ciphertext attacks: this type of attacks exploits properties of \nthe RSA algorithm by selecting blocks of data. These attacks can be \nthwarted by suitable padding of the plaintext, such as PKCS1 V1.5 in \nSSL\n\n\nPage 160:\nA simple attack on textbook RSA\n• Session-key  K is 64 bits.     View   K Î {0,…,264}\n• Eavesdropper sees:    C = Ke (mod N) .\n• Suppose   K = K1×K2 where   K1, K2 < 234 .   \n• Then:    C/K1\ne = K2\ne (mod N)\n• Build table:   C/1e, C/2e, C/3e, …, C/234e .   time:  234\nFor  K2 = 0,…, 234 test if  K2\ne is in table.   time: 234×34\n• Attack time:   »240  << 264\nWeb \nBrowser\nWeb\nServer\nRandom session key K\nd\nClient Hello\nServer Hello (e, N)\nC = RSA (K)\n\n\nPage 161:\nTake-home exercise – no need to submit \n• SW textbook (6th edition) problems: 3.14 & 3.15\n\n\nPage 162:\nHomomorphic encryption \n• Encryption scheme that allows computation on ciphertexts \n• an extension of public-key encryption scheme that allows anyone in \npossession of the public key to perform operations on encrypted data without \naccess to the decryption key\n• Partially Homomorphic Encryption: Initial public-key systems that \nallow this for either addition or multiplication, but not both.\n• i.e. RSA\n• Fully homomorphic encryption (FHE)\n\n\nPage 163:\nApplication of homomorphic encryption \n• One Use case: cloud computing \n• A weak computational device Alice (e.g., a mobile phone or a laptop) wishes \nto perform a computationally heavy task, beyond her computational means. \nShe can delegate it to a much stronger (but still feasible) machine Bob (the \ncloud, or a supercomputer) who offers the service of doing so. The problem is \nthat Alice does not trust Bob, who may give the wrong answer due to laziness, \nfault, or malice.\nE (Pk, data)\nE (Pk, f(data))\n\n\nPage 164:\nRSA reading materials\n• A Method for Obtaining Digital Signatures and Public-Key \nCryptosystems\n\n\nPage 165:\nMessage Authentication\n\n\nPage 166:\nMessage authentication\n• message authentication is concerned with: \n• protecting the integrity of a message \n• validating identity of originator \n• non-repudiation of origin (dispute resolution)\n• then three alternative functions used:\n• message encryption – symmetric\n• message authentication code (MAC)\n• digital signature\n\n\nPage 167:\nMessage encryption\n• Symmetric message encryption by itself also provides a measure of \nauthentication\n• if symmetric encryption is used then:\n• receiver knows sender must have created it\n• since only sender and receiver know key used\n• know content cannot be altered\n\n\nPage 168:\nHomework 1 questions\n• Symmetric Block Cypher provides authentication and confidentiality\n• Ans: True\n\n\nPage 169:\nMessage encryption\n• if public-key encryption is used:\n• encryption provides no confidence of sender\n• since anyone potentially knows public-key\n• so, need to recognize corrupted messages\n• however, if \n• sender signs message using their private-key\n• then encrypts with recipients’ public key\n• have both secrecy and authentication\n• but at cost of two public-key uses on message\n\n\nPage 170:\nReasons to avoid encryption authentication\n• Encryption software is quite slow\n• Encryption hardware costs are nonnegligible\n• Encryption hardware is optimized toward large data sizes\n• An encryption algorithm may be protected by a patent\n\n\nPage 171:\nHash Function\n\n\nPage 172:\nHash functions\n• Hash function: h = H(M)\n• M can be of any size \n• h is always of fixed size \n• Typically, h << size(M) \n\n\nPage 173:\nOne use case - using hash function\n• Initialization: A and B share a \ncommon secret, SAB\n• Message, M\n• A calculates MDM = H (SAB || M)\n• B recalculates MD’M, and check\n• MD’M = MDM\n\n\nPage 174:\nRequirements for secure hash functions\n• 1. can be applied to any sized message M\n• 2. produces fixed-length output h\n• 3. is easy to compute h=H(M) for any message M\n• 4. given h is infeasible to find x s.t. H(x)=h\n• one-way property or preimage resistance\n• 5. given x is infeasible to find x’",
    "chunk_order_index": 9,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-8ffd3d6a9f509409e8f027725cc62b79": {
    "tokens": 1200,
    "content": "MD’M = MDM\n\n\nPage 174:\nRequirements for secure hash functions\n• 1. can be applied to any sized message M\n• 2. produces fixed-length output h\n• 3. is easy to compute h=H(M) for any message M\n• 4. given h is infeasible to find x s.t. H(x)=h\n• one-way property or preimage resistance\n• 5. given x is infeasible to find x’ s.t. H(x’)=H(x)\n• weak collision resistance or second pre-image resistant\n• 6. infeasible to find any pair of x,x’ s.t. H(x’)=H(x)\n• strong collision resistance\n\n\nPage 175:\nHash Function: Collision Resistance\n• Collision: Two different inputs with the same output\n• x ≠ x' and H(x) = H(x')\n• Can we design a hash function with no collisions?\n• No, because there are more inputs than outputs (pigeonhole principle)\n• However, we want to make finding collisions infeasible for an attacker\n• Collision resistance: It is infeasible to (i.e. no polynomial time attacker \ncan) find any pair of inputs x' ≠ x such that H(x) = H(x')\n\n\nPage 176:\nSecure hash function\n• A hash function that satisfies the first five properties is referred to as \na weak hash function\n• Security: random/unpredictability, no predictable patterns for how \nchanging the input affects the output\n• Changing 1 bit in the input causes the output to be completely different\n• Also called “random oracle” assumption\n\n\nPage 177:\nSecure hash function\n• A hash function that satisfies the first five properties is referred to as \na weak hash function\n• Security: random/unpredictability, no predictable patterns for how \nchanging the input affects the output\n• Changing 1 bit in the input causes the output to be completely different\n• Also called “random oracle” assumption\n• A message digest\n• a cryptographic hash function containing a string of digits created by a one-\nway hashing formula\n• provides data integrity\n• Examples: SHA-1 (Secure Hash Algorithm 1), SHA-2, SHA-3, MD5\n\n\nPage 178:\nHash Function: Examples\n• MD5\n• Output: 128 bits\n• Security: Completely broken\n• SHA-1\n• Output: 160 bits\n• Security: Completely broken in 2017\n• Was known to be weak before 2017, but still used sometimes\n• SHA-2\n• Output: 256, 384, or 512 bits (sometimes labeled SHA-256, SHA-384, SHA-512)\n• Not currently broken, but some variants are vulnerable to a length extension attack\n• Current standard\n• SHA-3 (Keccak)\n• Output: 256, 384, or 512 bits\n• Current standard (not meant to replace SHA-2, just a different construction)\n\n\nPage 179:\nLength Extension Attacks\n• Length extension attack: Given H(x) and the length of x, but not x, an \nattacker can create H(x || m) for any m of the attacker’s choosing\n• Length extension attack - Wikipedia\n• SHA-256 (256-bit version of SHA-2) is vulnerable\n• SHA-3 is not vulnerable\n\n\nPage 180:\nLength Extension Attacks\n• Length extension attack: Given H(x) and the length of x, but not x, an \nattacker can create H(x || m) for any m of the attacker’s choosing\n• Length extension attack - Wikipedia\n• SHA-256 (256-bit version of SHA-2) is vulnerable\n• SHA-3 is not vulnerable\n\n\nPage 181:\n\n\nPage 182:\nDoes hashes provide integrity?\n• It depends on your threat model\n• Scenario\n• Mozilla publishes a new version of Firefox on some download servers\n• Alice downloads the program binary\n• How can she be sure that nobody tampered with the program?\n• Idea: use cryptographic hashes\n• Mozilla hashes the program binary and publishes the hash on its website\n• Alice hashes the binary she downloaded and checks that it matches the hash on the website\n• If Alice downloaded a malicious program, the hash would not match (tampering detected!)\n• An attacker can’t create a malicious program with the same hash (collision resistance)\n• Threat model: We assume the attacker cannot modify the hash on the website\n• We have integrity, as long as we can communicate the hash securely\n\n\nPage 183:\nDo hashes provide integrity?\n• It depends on your threat model\n• Scenario\n• Alice and Bob want to communicate over an insecure channel\n• David might tamper with messages\n• Idea: Use cryptographic hashes\n• Alice sends her message with a cryptographic hash over the channel\n• Bob receives the message and computes a hash on the message\n• Bob checks that the hash he computed matches the hash sent by Alice\n• Threat model: David can modify the message and the hash\n• No integrity!\n\n\nPage 184:\nMan-in-the-middle attack\nAlice\nM’\nMD’\nM\nMD\nM\nMD\nM’\nMD’\nBob\nDavid\n\n\nPage 185:\nDo hashes provide integrity? \n• It depends on your threat model\n• If the attacker can modify the hash, hashes don’t provide integrity\n• Main issue: Hashes are unkeyed functions\n• There is no secret key being used as input, so any attacker can compute a \nhash on any value\n\n\nPage 186:\nSolutions\n• A message digest created using a secret symmetric key is known as a \nMessage Authentication Code (MAC), because it can provide \nassurance that the message has not been modified\n• The sender can also generate",
    "chunk_order_index": 10,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-5437ac01b94e6c09c113841398864d3f": {
    "tokens": 1200,
    "content": "model\n• If the attacker can modify the hash, hashes don’t provide integrity\n• Main issue: Hashes are unkeyed functions\n• There is no secret key being used as input, so any attacker can compute a \nhash on any value\n\n\nPage 186:\nSolutions\n• A message digest created using a secret symmetric key is known as a \nMessage Authentication Code (MAC), because it can provide \nassurance that the message has not been modified\n• The sender can also generate a message digest and then encrypt the \ndigest using the private key of an asymmetric key pair, forming a \ndigital signature. The signature must then be verified by the receiver \nthrough comparing it with a locally generated digest\n\n\nPage 187:\nHashes: Summary\n• Map arbitrary-length input to fixed-length output\n• Output is deterministic\n• Security properties\n• One way: Given an output y, it is infeasible to find any input x such that H(x) = y.\n• Second preimage resistant: Given an input x, it is infeasible to find another input x' ≠ \nx such that H(x) = H(x').\n• Collision resistant: It is infeasible to find any pair of inputs x' ≠ x such that H(x) = \nH(x’).\n• Randomized output\n• Some hashes are vulnerable to length extension attacks\n• Hashes don’t provide integrity (unless you can publish the hash securely)\n\n\nPage 188:\nMessage Authentication Code\n\n\nPage 189:\nMessage authentication code (MAC)\n• generated by an algorithm that creates a small fixed-sized block\n• depending on both message and some key\n• not be reversible\n• MACM = F(KAB, M)\n• appended to message as a signature\n• receiver performs same computation on message and checks it \nmatches the MAC\n• provides assurance that message is unaltered and comes from sender\n\n\nPage 190:\nMACs: Usage\n• Alice wants to send M to Bob, but doesn’t want David to tamper with it\n• Alice sends M and T = MAC(K, M) to Bob\n• Bob receives M and T\n• Bob computes MAC(K, M) and checks that it matches T\n• If the MACs match, Bob is confident the message has not been \ntampered with (integrity)\n\n\nPage 191:\nMACs: Definition\n• Two parts:\n• KeyGen() → K: Generate a key K\n• MAC(K, M) → T: Generate a tag T for the message M using key K\n• Inputs: A secret key and an arbitrary-length message\n• Output: A fixed-length tag on the message\n• Properties\n• Correctness: Determinism\n• Note: Some more complicated MAC schemes have an additional Verify(K, M, T) function \nthat don’t require determinism, but this is out of scope\n• Efficiency: Computing a MAC should be efficient\n• Security: existentially unforgeable under chosen plaintext attack\n\n\nPage 192:\nMid-term Exam\n• Nov. 6, 2024 (Wednesday), 12:00 pm – 12:50 pm, in class\n• Closed book, but you're allowed to bring one cheat sheet (1 A4-sized \npaper)\n• Chapter 1 – 3\n• Will have a review class on Nov. 1st , during class\n\n\nPage 193:\nExistentially unforgeable\n• A secure MAC is existentially unforgeable: without the key, an \nattacker cannot create a valid tag on a message\n• David cannot generate MAC(K, M') without K\n• David cannot find any M' ≠ M such that MAC(K, M') = MAC(K, M)\n\n\nPage 194:\nExample: HMAC\n• issued as RFC 2104 [1]\n• has been chosen as the mandatory-to-implement MAC for IP Security\n• Used in Transport Layer Security (TLS) and Secure Electronic \nTransaction (SET)\n[1] “HMAC: Keyed-Hashing for Message Authentication”, RFC 2104, https://datatracker.ietf.org/doc/html/rfc2104\n\n\nPage 195:\nHMAC(K, M)\n• will produce two keys to increase security\n• If key is longer than the desired size, we can hash it first, but be \ncareful with using keys that are too much smaller, they have to have \nenough randomness in them\n• Output H[(K+ ⊕opad) || H[(K+ ⊕ipad) || M]]\n\n\nPage 196:\nExample: HMAC\n• HMAC(K, M):\n• Output H[(K+ ⊕opad) || H[(K+ ⊕ipad) || M]]\n• Use K to derive two different keys\n• opad (outer pad) is the hard-coded byte 0x5c repeated until it’s the same \nlength as K+\n• ipad (inner pad) is the hard-coded byte 0x36 repeated until it’s the same \nlength as K+\n• As long as opad and ipad are different, you’ll get two different keys\n• For paranoia, the designers chose two very different bit patterns, even though \nthey theoretically need only differ in one bit\n\n\nPage 197:\nHMAC \nA\nB\nA ⨁B\n0 \n0\n0\n0\n1\n1\n1\n0\n1\n1\n1\n0\nK+ = !H 𝐾 \n𝐾 𝑖𝑠 𝑙𝑎𝑟𝑔𝑒𝑟 𝑡ℎ𝑎𝑛 𝑏𝑙𝑜𝑐𝑘 𝑠𝑖𝑧𝑒",
    "chunk_order_index": 11,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-47b0b899ac51dc078a3484b91ef92652": {
    "tokens": 1200,
    "content": "0 \n0\n0\n0\n1\n1\n1\n0\n1\n1\n1\n0\nK+ = !H 𝐾 \n𝐾 𝑖𝑠 𝑙𝑎𝑟𝑔𝑒𝑟 𝑡ℎ𝑎𝑛 𝑏𝑙𝑜𝑐𝑘 𝑠𝑖𝑧𝑒\n𝐾 \n𝑜𝑡ℎ𝑒𝑟𝑤𝑖𝑠𝑒\nipad = 00110110 , repeat b/8 times\nopad = 01011100, repeat b/8 times\n\n\nPage 198:\nHMAC procedure\n• Step 1: Append zeros to the left end of K to create a b-bit string K+ (e.g., if K \nis of length 160 bits and b = 512, then K will be appended with 44 zero \nbytes); \n• Step 2: XOR (bitwise exclusive-OR) K+ with ipad to produce the b-bit block \nSi;\n• Step 3: Append M to Si;\n• Step 4: Apply H to the stream generated in step 3; \n• Step 5: XOR K+ with opad to produce the b-bit block So;\n• Step 6: Append the hash result from step 4 to So;\n• Step 7: Apply H to the stream generated in step 6 and output the result. \n\n\nPage 199:\nHMAC Properties\n• HMAC(K, M) = H[(K+ ⊕opad) || H((K+ ⊕ipad) || M]]\n• HMAC is a hash function, so it has the properties of the underlying \nhash too\n• It is collision resistant\n• Given HMAC(K, M), an attacker can’t learn M – one way\n• If the underlying hash is secure, HMAC doesn’t reveal M, but it is still \ndeterministic\n• You can’t verify a tag T if you don’t have K\n• This means that an attacker can’t brute-force the message M without \nknowing K\n\n\nPage 200:\nMACs: Summary\n• Inputs: a secret key and a message\n• Output: a tag on the message\n• A secure MAC is unforgeable: Even if David can trick Alice into \ncreating MACs for messages that David chooses, David cannot create \na valid MAC on a message that she hasn't seen before\n• Example: HMAC(K, M) = H((K+ ⊕opad) || H((K+ ⊕ipad) || M))\n• MACs do not provide confidentiality\n\n\nPage 201:\nDo MACs provide integrity? \n• Do MACs provide integrity?\n• Yes. An attacker cannot tamper with the message without being detected\n• Do MACs provide authenticity?\n• It depends on your threat model\n• If only two people have the secret key, MACs provide authenticity: it has a \nvalid MAC, and it’s not from me, so it must be from the other person\n• More than one secret key, If a message has a valid MAC, you can be sure it \ncame from someone with the secret key, but you can’t narrow it down to one \nperson\n• Do MACs provide confidentiality?\n\n\nPage 202:\nAuthenticated Encryption\n\n\nPage 203:\nAuthenticated Encryption: Definition\n• Authenticated encryption (AE): A scheme that simultaneously \nguarantees confidentiality and integrity (and authenticity, depending \non your threat model) on a message\n• Two ways of achieving authenticated encryption:\n• Combine schemes that provide confidentiality with schemes that provide \nintegrity\n• Use a scheme that is designed to provide confidentiality and integrity\n\n\nPage 204:\nAuthenticated Encryption: Definition\n• Authenticated encryption (AE): A scheme that simultaneously \nguarantees confidentiality and integrity (and authenticity, depending \non your threat model) on a message\n• Two ways of achieving authenticated encryption:\n• Combine schemes that provide confidentiality with schemes that provide \nintegrity\n• Use a scheme that is designed to provide confidentiality and integrity\n\n\nPage 205:\nScratchpad: Let’s design it together\n• You can use:\n• An encryption scheme: Enc(K, M) and Dec(K, M)\n• An unforgeable MAC scheme (e.g. HMAC): MAC(K, M)\n• First attempt: Alice sends Enc(K1, M) and MAC(K2, M)\n• Integrity? Yes, attacker can’t tamper with the MAC\n• Confidentiality? No, the MAC is not secure\n• Idea 1: Let’s compute the MAC on the ciphertext instead of the plaintext:\nEnc(K1, M) and MAC(k2, Enc(K1, M))\n• Integrity? Yes, attacker can’t tamper with the MAC\n• Confidentiality? Yes, the MAC might leak info about the ciphertext, but that’s okay\n• Idea 2: Let’s encrypt the MAC too: Enc(K1, M || MAC(K2, M))\n• Integrity? Yes, attacker can’t tamper with the MAC\n• Confidentiality? Yes, everything is encrypted\n\n\nPage 206:\nMAC-then-Encrypt or Encrypt-then-MAC?\n• Method 1: Encrypt-then-MAC\n• First compute Enc(K1, M)\n• Then MAC the ciphertext: MAC(K2, Enc(K1, M))\n• Method 2: MAC-then-encrypt\n• First compute MAC(K2, M)\n• Then encrypt the message and the MAC together: Enc(k1, M || MAC(K2, M))\n• Which is better?\n• In theory, both are secure if applied properly\n•",
    "chunk_order_index": 12,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-d5fdaef73d4c1d8b1f19827dbb97a3fc": {
    "tokens": 1200,
    "content": "-then-MAC?\n• Method 1: Encrypt-then-MAC\n• First compute Enc(K1, M)\n• Then MAC the ciphertext: MAC(K2, Enc(K1, M))\n• Method 2: MAC-then-encrypt\n• First compute MAC(K2, M)\n• Then encrypt the message and the MAC together: Enc(k1, M || MAC(K2, M))\n• Which is better?\n• In theory, both are secure if applied properly\n• MAC-then-encrypt has a flaw: You don’t know if tampering has occurred until after \ndecrypting\n• Attacker can supply arbitrary tampered input, and you always have to decrypt it\n• Passing attacker-chosen input through the decryption function can cause side-channel leaks\n• Always use encrypt-then-MAC because it’s more robust to mistakes\n\n\nPage 207:\nTLS 1.0 “Lucky 13” Attack\n• TLS: A protocol for sending encrypted and authenticated messages over the \nInternet\n• TLS 1.0 uses MAC-then-encrypt: Enc(k1, M || MAC(k2, M))\n• The encryption algorithm is AES-CBC\n• The Lucky 13 attack abuses MAC-then-encrypt to read encrypted messages\n• Guess a byte of plaintext and change the ciphertext accordingly\n• The MAC will error, but the time it takes to error is different depending on if the \nguess is correct\n• Attacker measures how long it takes to error in order to learn information about \nplaintext\n• TLS will send the message again if the MAC errors, so the attacker can guess \nrepeatedly\n• Takeaways\n• Side channel attack: The algorithm is proved secure, but poor implementation made \nit vulnerable\n• Always encrypt-then-MAC\n\n\nPage 208:\nAuthenticated Encryption: Summary\n• Authenticated encryption: A scheme that simultaneously guarantees \nconfidentiality and integrity (and authenticity) on a message\n• First approach: Combine schemes that provide confidentiality with \nschemes that provide integrity and authenticity\n• MAC-then-encrypt: Enc(K1, M || MAC(K2, M))\n• Encrypt-then-MAC: MAC(K2, Enc(K1, M))\n• Always use Encrypt-then-MAC because it's more robust to mistakes\n\n\nPage 209:\nDigital Signature\n\n\nPage 210:\nDigital Signatures\n• NIST FIPS PUB 186-4 - the result of a cryptographic transformation of \ndata that, when properly implemented, provides a mechanism for \nverifying origin authentication, data integrity, and signatory non-\nrepudiation\n• Based on asymmetric keys\n\n\nPage 211:\nDigital Signatures\n• Asymmetric cryptography is good because we don’t need to share a \nsecret key\n• Digital signatures are the asymmetric way of providing \nintegrity/authenticity to data\n• Assume that Alice and Bob can communicate public keys without \nDavid interfering\n\n\nPage 212:\nDigital Signatures: Definition\n• Three parts:\n• KeyGen() → PK, SK: Generate a public/private keypair, where PK is the verify (public) key, and SK\nis the signing (secret) key\n• Sign(SK, M) → sig: Sign the message M using the signing key SK to produce the signature sig\n• Verify(PK, M, sig) → {0, 1}: Verify the signature sig on message M using the verify key PK and \noutput 1 if valid and 0 if invalid\n• Properties:\n• Correctness: Verification should be successful for a signature generated over any message\n• Verify(PK, M, Sign(SK, M)) = 1 for all PK, SK ← KeyGen() and M\n• Efficiency: Signing/verifying should be fast\n• Security: Same as for MACs except that the attacker also receives PK\n• Namely, no attacker can forge a signature for a message\n\n\nPage 213:\nRSA Signature\n• KeyGen():\n• Randomly pick two large primes, p and q\n• Compute n = pq\n• n is usually between 2048 bits and 4096 bits long\n• Choose e\n• Requirement: e is relatively prime to (p - 1)(q - 1)\n• Requirement: 2 < e < (p - 1)(q - 1)\n• Compute d = e-1 mod (p - 1)(q - 1)\n• Public key: n and e\n• Private key: d\n\n\nPage 214:\nA Short Quiz\n• We will have a short quiz on Wednesday, Oct. 30, in class \n• A short quiz will cover the materials taught that day. \n\n\nPage 215:\nRSA Signatures\n• Sign(d, M):\n• Compute H(M)d mod n\n• Verify(e, n, M, sig)\n• Verify that H(M) ≡ sige mod n\n\n\nPage 216:\nRSA Digital Signature Algo\nStep1: Generate a hash value, or message digest, \nmHash from the message M to be signed \nStep2: Pad mHash with a constant value padding1 and \npseudorandom value salt to form M’ \nStep3: Generate hash value H from M’\nStep4: Generate a block DB consisting of a constant \nvalue padding 2 and salt\nStep5: Use the mask generating function MGF, which \nproduces a randomized out-put from input H of the \nsame length as DB\nStep 6: Create the encoded message (EM) block by \npadding H with the hexadecimal constant bc and the \nXOR of DB and output of MGF\nStep 7: Encrypt EM with RSA using the signer’s private \nkey \n\n\nPage 217:\nRSA Signatures: Correctness\nTheorem: sige ≡ H(M) mod N\nProof:\nsige = [�",
    "chunk_order_index": 13,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  },
  "chunk-ad64d4e60b3138a59660a1c37d76448c": {
    "tokens": 835,
    "content": ", which \nproduces a randomized out-put from input H of the \nsame length as DB\nStep 6: Create the encoded message (EM) block by \npadding H with the hexadecimal constant bc and the \nXOR of DB and output of MGF\nStep 7: Encrypt EM with RSA using the signer’s private \nkey \n\n\nPage 217:\nRSA Signatures: Correctness\nTheorem: sige ≡ H(M) mod N\nProof:\nsige = [𝐻𝑀𝑑 ]𝑒 𝑚𝑜𝑑 𝑁\n= 𝐻(𝑀)\"# mod N\n\n\nPage 218:\nRSA Signatures: Correctness\nTheorem: sige ≡ H(M) mod N\nProof:\nsige = [𝐻𝑀𝑑 ]𝑒 𝑚𝑜𝑑 𝑁\n= 𝐻(𝑀)\"# mod N\n= 𝐻(𝑀)$% & '(   mod N\n=  [𝐻(𝑀)%(&)]$- 𝐻𝑀 mod N\n= H(M)    mod N\n\n\nPage 219:\nRSA Digital Signature: Security\n• Necessary hardness assumptions:\n• Factoring hardness assumption: Given n large, it is hard to find primes pq = n\n• Discrete logarithm hardness assumption: Given n large, hash, and hashd mod \nn, it is hard to find d\n• Salt also adds security\n• Even the same message and private key will get different signatures\n\n\nPage 220:\nHybrid Encryption\n• Issues with public-key encryption\n• Notice: We can only encrypt small messages because of the modulo operator\n• Notice: There is a lot of math, and computers are slow at math\n• Result: We don’t use asymmetric for large messages\n• Hybrid encryption: Encrypt data under a randomly generated key K\nusing symmetric encryption, and encrypt K using asymmetric \nencryption\n• EncAsym(PK, K); EncSym(K, large message)\n• Benefit: Now we can encrypt large amounts of data quickly using symmetric \nencryption, and we still have the security of asymmetric encryption\n\n\nPage 221:\nHomework (Textbook) – no submission\n• Review Question: 3.1, 3.2, 3.3, 3.4, 3.5, 3.6\n• Problems: \n• prove correctness of RSA digital signature\n• 3.14 & 3.15\n\n\nPage 222:\nHomework 2 - individual\n• For Chapter 3\n• Deadline Friday, Nov. 1 before class\n• 10% penalty per day for late submission\n\n\nPage 223:\nThank you!\n\n\nPage 224:\nNetwork Security\nChapter 4\n\n\nPage 225:\nKey Distribution\n\n\nPage 226:\nSymmetric Key Distribution and User Authentication\n4.2 \n\n\nPage 227:\nWays to achieve symmetric key distribution\n• A key could be selected by A and physically delivered to B\n• A third party could select the key and physically deliver it to A and B \n• If A and B have previously and recently used a key, one party could \ntransmit the new key to the other, using the old key to encrypt the \nnew key \n• If A and B each have an encrypted connection to a third-party C, C \ncould deliver a key on the encrypted links to A and B \n\n\nPage 228:\nTerminologies\n• Session key\n• Permanent key\n• key distribution center (KDC) \n• third party authority, centralized infrastructure\n• give permissions for two parties to communicate\n\n\nPage 229:\nDiffie-Hellman Key Exchange\nSection 3.5\n\n\nPage 230:\nIn class quiz on Wednesday\n• We will have a short quiz on Wednesday, Oct. 30, in class\n• A short quiz will cover the materials taught that day.\n• Please be on time for class to avoid missing the quiz questions.",
    "chunk_order_index": 14,
    "full_doc_id": "doc-cd13965b956320f584e158d31cea3e47"
  }
}